Welcome to PSY-TaLiRo
=====================

PSY-TaLiRo is a python toolbox for general, system-level testing. Every component of PSY-TaLiRo can
be extended or replaced, but implementations for a few common use cases are included of the box.

PSY-TaLiRo aims to make writing and testing requirements for systems fast and easy to help
facilitate adoption of formal methods for verifying all kinds of systems. To assist with this,
PSY-TaLiRo tries to be as general as possible in the interfaces of its components. The toolbox also
takes advantage of the python type annotations defined in PEP484 which allows testers to use static
analysis tools like MyPy to verify their code during development.

A test using PSY-TaLiRo requires 4 components to be defined:

- A model
- A specification
- An optimizer
- An options object

Using some of the pre-build components, a simple PSY-TaLiRo test might look like:

.. code-block:: python

   import staliro

   # Type aliases
   StaticParamT = staliro.models.StaticParameters
   TimesT = staliro.models.SignalTimes
   SignalsT = staliro.models.SignalValues
   ModelResultT = staliro.models.SimulationResult[None]


   @staliro.blackbox()
   def model(static_params: StaticParamT, times: TimesT, signals: SignalsT) -> ModelResultT:
      simulator = ...  # Prepare simulator given static parameters
      simulation_data = ...  # Simulate system given signal times and values

      return models.SimulationResult(simulation_data["trajectories"], simulation_data["timestamps"])


   requirement = "always (height <= 10)"
   specification = staliro.RTAMTDense(requirement, {"height": staliro.PredicateProps(0)})
   optimizer = staliro.UniformRandom()
   options = staliro.Options(runs=1, iterations=10, static_parameters=[(1, 10)])

   if __name__ == "__main__":
      result = staliro.staliro(model, specification, optimizer, options)

      for run in result.runs:
         for evaluation in run.history:
            print(f"Sample: {evalutation.sample} -> Cost: {evaluation.cost}")


In this example, we use a blackbox model, which is a type of model that makes no assumptions about
the underlying system being tested. We also use an RTAMT dense-time specification, which evaluates
the result of the simulation using requirements written in Signal Temporal Logic (STL). Finally,
the options object defines a couple of attributes to control the behavior of the test:

- the number of times to run the optimizer
- The number of samples the optimizer should generate
- The bounds of the static parameters to be generated by the optimizer each iteration

To get started using PSY-TaLiRo you can install it directory from PyPI

.. code-block:: console

   pip install psy-taliro

If you do choose to use PSY-TaLiRo for academic work, please make sure you cite our paper:
`PSY-TaLiRo: A Python Toolbox for Search-Based Test Generation for Cyber-Physical Systems <https://arxiv.org/abs/2106.02200>`_

Usage
-----
Get started quickly with set up guides and examples to start developing your tests fast!

.. toctree::
   :maxdepth: 2

   quickstart
   examples

Documentation
-------------
  
Interface specifications, and implementation guides for each of these components can be found
on the following pages:

.. toctree::
   :maxdepth: 2

   architecture
   models
   signals
   specifications
   optimizers
   options
   results
